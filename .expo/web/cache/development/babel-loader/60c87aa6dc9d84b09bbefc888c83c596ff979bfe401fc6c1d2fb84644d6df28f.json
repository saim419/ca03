{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport * as ImagePicker from 'expo-image-picker';\nimport Button from \"./Button\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Dictionary(_ref) {\n  var savedPhoto = _ref.savedPhoto;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    description = _useState2[0],\n    setDescription = _useState2[1];\n  var _useState3 = useState(null),\n    _useState4 = _slicedToArray(_useState3, 2),\n    uploadedPhoto = _useState4[0],\n    setUploadedPhoto = _useState4[1];\n  var handleUpload = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      var permissionResult = yield ImagePicker.requestMediaLibraryPermissionsAsync();\n      if (permissionResult.granted === false) {\n        alert('Permission to access the camera roll is required!');\n        return;\n      }\n      var pickerResult = yield ImagePicker.launchImageLibraryAsync();\n      if (!pickerResult.canceled) {\n        var assets = pickerResult.assets;\n        if (assets.length > 0) {\n          var uri = assets[0].uri;\n          setUploadedPhoto(uri);\n        }\n      }\n    });\n    return function handleUpload() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(View, {\n      style: styles.photoContainer,\n      children: uploadedPhoto ? _jsx(Image, {\n        source: {\n          uri: uploadedPhoto\n        },\n        style: styles.photo,\n        resizeMode: \"cover\"\n      }) : _jsx(Image, {\n        source: {\n          uri: savedPhoto\n        },\n        style: styles.photo,\n        resizeMode: \"cover\"\n      })\n    }), _jsx(TextInput, {\n      style: styles.descriptionInput,\n      placeholder: \"Add a description...\",\n      value: description,\n      onChangeText: function onChangeText(text) {\n        return setDescription(text);\n      },\n      multiline: true\n    }), _jsx(TouchableOpacity, {\n      style: styles.uploadButton,\n      onPress: handleUpload,\n      children: _jsx(Text, {\n        style: styles.uploadButtonText,\n        children: \"Upload\"\n      })\n    }), _jsx(TouchableOpacity, {\n      style: styles.saveButton,\n      onPress: function onPress() {\n        return console.log('Save button pressed');\n      },\n      children: _jsx(Text, {\n        style: styles.saveButtonText,\n        children: \"Save\"\n      })\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  uploadButton: {\n    backgroundColor: 'blue',\n    paddingHorizontal: 20,\n    paddingVertical: 10,\n    borderRadius: 5,\n    marginBottom: 20\n  },\n  uploadButtonText: {\n    color: '#fff',\n    fontWeight: 'bold'\n  }\n});","map":{"version":3,"names":["React","useState","StyleSheet","Text","View","Image","TextInput","TouchableOpacity","ImagePicker","Button","jsx","_jsx","jsxs","_jsxs","Dictionary","_ref","savedPhoto","_useState","_useState2","_slicedToArray","description","setDescription","_useState3","_useState4","uploadedPhoto","setUploadedPhoto","handleUpload","_ref2","_asyncToGenerator","permissionResult","requestMediaLibraryPermissionsAsync","granted","alert","pickerResult","launchImageLibraryAsync","canceled","assets","length","uri","apply","arguments","style","styles","container","children","photoContainer","source","photo","resizeMode","descriptionInput","placeholder","value","onChangeText","text","multiline","uploadButton","onPress","uploadButtonText","saveButton","console","log","saveButtonText","create","backgroundColor","paddingHorizontal","paddingVertical","borderRadius","marginBottom","color","fontWeight"],"sources":["/Users/saimsiddiqui/Desktop/picture/cam1/src/components/Dictionary.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, Text, View, Image, TextInput, TouchableOpacity } from 'react-native';\nimport * as ImagePicker from 'expo-image-picker'; // Import the necessary ImagePicker module\nimport Button from './Button';\n\nexport default function Dictionary({ savedPhoto }) {\n    const [description, setDescription] = useState('');\n    const [uploadedPhoto, setUploadedPhoto] = useState(null); // State to store the uploaded photo\n\n    const handleUpload = async () => {\n        const permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (permissionResult.granted === false) {\n            alert('Permission to access the camera roll is required!');\n            return;\n        }\n\n        const pickerResult = await ImagePicker.launchImageLibraryAsync();\n        if (!pickerResult.canceled) { // Use \"canceled\" instead of \"cancelled\"\n            const { assets } = pickerResult;\n            if (assets.length > 0) {\n                const { uri } = assets[0];\n                setUploadedPhoto(uri);\n            }\n        }\n    };\n\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.photoContainer}>\n                {uploadedPhoto ? (\n                    <Image source={{ uri: uploadedPhoto }} style={styles.photo} resizeMode=\"cover\" />\n                ) : (\n                    <Image source={{ uri: savedPhoto }} style={styles.photo} resizeMode=\"cover\" />\n                )}\n            </View>\n\n            <TextInput\n                style={styles.descriptionInput}\n                placeholder=\"Add a description...\"\n                value={description}\n                onChangeText={text => setDescription(text)}\n                multiline\n            />\n\n            <TouchableOpacity style={styles.uploadButton} onPress={handleUpload}>\n                <Text style={styles.uploadButtonText}>Upload</Text>\n            </TouchableOpacity>\n\n            <TouchableOpacity style={styles.saveButton} onPress={() => console.log('Save button pressed')}>\n                <Text style={styles.saveButtonText}>Save</Text>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    // Existing styles...\n\n    uploadButton: {\n        backgroundColor: 'blue',\n        paddingHorizontal: 20,\n        paddingVertical: 10,\n        borderRadius: 5,\n        marginBottom: 20,\n    },\n    uploadButtonText: {\n        color: '#fff',\n        fontWeight: 'bold',\n    },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}